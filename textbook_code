Below are the code segments corresponding to the chapters and sections of the book. You can copy and paste these into your GitHub repository, and students can refer to these examples as they work through the lessons.

Chapter 2: HTML and Document Object Model (DOM)


Section: Introduction to HTML
Creating a Basic HTML Page:


<!DOCTYPE html>
<html>
<head>
  <title>My First Web Page</title>
</head>
<body>
  <p>Welcome to my first web page!</p>
  <img src="image.jpg" alt="An example image">
</body>
</html>


Section: Document Object Model (DOM)
Manipulating the DOM with JavaScript:


document.getElementById('myButton').addEventListener('click', function() {
  document.getElementById('myParagraph').innerText = 'You clicked the button!';
});



Chapter 3: Browser Object Model (BOM) and JavaScript


Using JavaScript to Interact with BOM:


function welcome() {
  alert('Welcome to our website!');
}



Chapter 4: Node.js and MongoDB


Section: Introduction to Node.js
Creating a Simple Node.js Server:


const http = require('http');

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World!');
});

server.listen(3000, () => {
  console.log('Server running on http://localhost:3000/');
});
Section: Mongoose and MongoDB
Connecting to MongoDB and Creating a Schema:
javascript
Copy code
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true });

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String
});

const User = mongoose.model('User', userSchema);



Chapter 5: Full Stack Development with Node.js, Express, and MongoDB


Section: Creating Endpoints with Express
Creating a CRUD API:
javascript
Copy code
const express = require('express');
const app = express();
app.use(express.json());

app.post('/users', (req, res) => {/* Code to create a user */});
app.get('/users', (req, res) => {/* Code to fetch all users */});
app.put('/users/:id', (req, res) => {/* Code to update a user */});
app.delete('/users/:id', (req, res) => {/* Code to delete a user */});

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000/');
});
Section: Connecting Frontend to Backend
Creating a Form to Send Data:
html
Copy code
<form id="userForm">
  <input type="text" id="name" placeholder="Name">
  <input type="email" id="email" placeholder="Email">
  <input type="password" id="password" placeholder="Password">
  <button type="submit">Submit</button>
</form>

<script>
document.getElementById('userForm').addEventListener('submit', function(e) {
  e.preventDefault();

  const name = document.getElementById('name').value;
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;

  fetch('/users', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ name, email, password })
  })
  .then(response => response.json())
  .then(data => {/* Handle the response */});
});
</script>

